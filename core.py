# ‚úÖ –ù–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π –∫–æ–¥ –±–µ–∑ pytesseract (OCR –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω)
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è pdfplumber –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF

import streamlit as st
import pandas as pd
import pdfplumber
import re
from openpyxl import load_workbook
from io import BytesIO

# --- –§—É–Ω–∫—Ü–∏–∏ ---
def extract_text_from_pdf(file):
    text = ""
    with pdfplumber.open(file) as pdf:
        for page in pdf.pages:
            text += page.extract_text() + "\n"
    return text

def parse_requirements(text):
    lines = text.split("\n")
    rows = []
    for line in lines:
        if any(char.isdigit() for char in line):
            parts = re.split(r"\s{2,}|\t", line.strip())
            if len(parts) >= 2:
                name = parts[0]
                quantity = re.search(r"\d+", parts[1])
                quantity = quantity.group() if quantity else ""
                rows.append({"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ –¢–ó": name, "–ö–æ–ª-–≤–æ": quantity})
    return pd.DataFrame(rows)

def load_price_list(files):
    all_items = []
    for file in files:
        df = pd.read_excel(file, header=None)
        for index, row in df.iterrows():
            for col in row:
                if isinstance(col, str) and any(word in col.lower() for word in ["—Å—Ç–æ–ª", "–∫—Ä–µ—Å–ª–æ", "–ª–∞–º–ø–∞", "—à–∫–∞—Ñ", "–±–∞–Ω–∫–µ—Ç–∫–∞", "–±–∞—Ä—å–µ—Ä"]):
                    item = {
                        "–ê—Ä—Ç–∏–∫—É–ª": row[0] if len(row) > 0 else "",
                        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": col,
                        "–¶–µ–Ω–∞": next((v for v in row if isinstance(v, (int, float))), "")
                    }
                    all_items.append(item)
                    break
    return pd.DataFrame(all_items)

def process_documents(spec_file, prices_files):
    text = extract_text_from_pdf(spec_file)
    ts_df = parse_requirements(text)
    prices_df = load_price_list(prices_files)

    results = []
    for _, row in ts_df.iterrows():
        name = row["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ –¢–ó"]
        qty = row["–ö–æ–ª-–≤–æ"]
        match = prices_df[prices_df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"].str.contains(name.split()[0], case=False, na=False)]
        match = match.head(3)
        item = {
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ –¢–ó": name,
            "–ö–æ–ª-–≤–æ": qty
        }
        for i, (_, mrow) in enumerate(match.iterrows(), start=1):
            item[f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ {i}"] = "–ü—Ä–∞–π—Å"
            item[f"–¶–µ–Ω–∞ {i}"] = mrow["–¶–µ–Ω–∞"]
        results.append(item)

    result_df = pd.DataFrame(results)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ Excel –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
    wb = load_workbook("–§–æ—Ä–º–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.xlsx")
    ws = wb.active
    start_row = 10
    for i, row in result_df.iterrows():
        ws.cell(row=start_row + i, column=1, value=i + 1)
        ws.cell(row=start_row + i, column=2, value=row["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ –¢–ó"])
        ws.cell(row=start_row + i, column=3, value=row["–ö–æ–ª-–≤–æ"])
        ws.cell(row=start_row + i, column=4, value=row.get("–ü–æ—Å—Ç–∞–≤—â–∏–∫ 1"))
        ws.cell(row=start_row + i, column=5, value=row.get("–¶–µ–Ω–∞ 1"))

    output = BytesIO()
    wb.save(output)
    output.seek(0)

    return text[:1000], result_df, output.read()

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.set_page_config(page_title="AI-—Å–µ—Ä–≤–∏—Å –ø–æ–¥–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", layout="wide")
st.title("ü§ñ AI-—Å–µ—Ä–≤–∏—Å –ø–æ–¥–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")

uploaded_spec = st.file_uploader("üìÑ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ (PDF)", type="pdf")
uploaded_prices = st.file_uploader("üìä –ü—Ä–∞–π—Å—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (XLSX)", type="xlsx", accept_multiple_files=True)

if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–±–æ—Ä"):
    if uploaded_spec and uploaded_prices:
        with st.spinner("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
            ts_text, result_df, output_file = process_documents(uploaded_spec, uploaded_prices)
        st.success("‚úÖ –ü–æ–¥–±–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω")
        st.subheader("üìë –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –¢–ó")
        st.text_area("–¢–µ–∫—Å—Ç –¢–ó (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤)", ts_text, height=200)

        st.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–±–æ—Ä–∞")
        st.dataframe(result_df, use_container_width=True)

        st.download_button(
            label="üíæ –°–∫–∞—á–∞—Ç—å Excel",
            data=output_file,
            file_name="–†–µ–∑—É–ª—å—Ç–∞—Ç_–ø–æ–¥–±–æ—Ä–∞.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    else:
        st.warning("‚ùó –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–æ–≤: –¢–ó –∏ –ø—Ä–∞–π—Å—ã")
